Producer (Python) kirim data JSON ke Kafka topic.

Spark Structured Streaming baca data dari Kafka, parsing JSON, lalu transformasi.

Spark tulis hasil ke MySQL lewat JDBC.

1. Producer: Python kirim data ke Kafka
from kafka import KafkaProducer
import json
import time
import random

producer = KafkaProducer(
    bootstrap_servers="localhost:9092",
    value_serializer=lambda v: json.dumps(v).encode("utf-8")
)

while True:
    data = {
        "id": random.randint(1, 1000),
        "name": random.choice(["Andi", "Budi", "Cici", "Dewi"]),
        "amount": random.randint(500, 5000)
    }
    producer.send("sales_topic", data)
    print("Sent:", data)
    time.sleep(2)

2. Spark Streaming: Baca Kafka → Transformasi → Simpan ke MySQL
from pyspark.sql import SparkSession
from pyspark.sql.functions import from_json, col
from pyspark.sql.types import StructType, StructField, IntegerType, StringType, DoubleType

spark = SparkSession.builder \
    .appName("Kafka-Spark-MySQL") \
    .config("spark.jars", "/opt/mysql-connector-java-8.0.33.jar") \
    .getOrCreate()

# 1. Schema JSON
schema = StructType([
    StructField("id", IntegerType()),
    StructField("name", StringType()),
    StructField("amount", DoubleType())
])

# 2. Baca dari Kafka
df_raw = spark.readStream \
    .format("kafka") \
    .option("kafka.bootstrap.servers", "localhost:9092") \
    .option("subscribe", "sales_topic") \
    .option("startingOffsets", "latest") \
    .load()

# 3. Parse JSON dari value Kafka
df_parsed = df_raw.selectExpr("CAST(value AS STRING)") \
    .select(from_json(col("value"), schema).alias("data")) \
    .select("data.*")

# 4. Filter & transformasi
df_filtered = df_parsed.filter(col("amount") > 1000)

# 5. Sink ke MySQL (pakai foreachBatch)
def write_to_mysql(batch_df, batch_id):
    batch_df.write \
        .format("jdbc") \
        .option("url", "jdbc:mysql://192.168.1.50:3306/db_test") \
        .option("driver", "com.mysql.cj.jdbc.Driver") \
        .option("dbtable", "sales_stream") \
        .option("user", "db_user") \
        .option("password", "db_password") \
        .mode("append") \
        .save()

query = df_filtered.writeStream \
    .foreachBatch(write_to_mysql) \
    .outputMode("update") \
    .start()

query.awaitTermination()

3. Struktur tabel MySQL

Sebelum menjalankan, buat tabel target di MySQL:

CREATE TABLE sales_stream (
    id INT,
    name VARCHAR(50),
    amount DOUBLE,
    ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


⚡ Dengan ini:

Producer → Kafka (sales_topic).

Spark Streaming konsumsi data, filter amount > 1000.

Output tersimpan otomatis ke MySQL.
